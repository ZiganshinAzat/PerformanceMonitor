import Foundation
import PerformanceMonitor

// MARK: - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PerformanceMonitor

class ExampleUsage {
    
    func basicUsage() {
        print("üöÄ –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PerformanceMonitor")
        
        // 1. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        PerformanceMonitor.shared.start()
        
        // 2. –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        simulateAppWork()
        
        // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
        if let metrics = PerformanceMonitor.shared.getCurrentMetrics() {
            print("üìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print("   FPS: \(String(format: "%.1f", metrics.fps))")
            print("   CPU: \(String(format: "%.1f", metrics.cpuUsage))%")
            print("   Memory: \(String(format: "%.1f", metrics.memoryUsage)) MB")
            if let battery = metrics.batteryLevel {
                print("   Battery: \(String(format: "%.0f", battery))%")
            }
        }
        
        // 4. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        PerformanceMonitor.shared.stop()
    }
    
    func advancedUsage() {
        print("\nüîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        let customThresholds = PerformanceThresholds(
            minFPS: 30.0,
            maxCPU: 90.0,
            maxMemory: 300.0,
            maxNetworkDuration: 10.0,
            memorySpikeFactor: 2.0
        )
        
        // –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        PerformanceMonitor.shared.start(
            interval: 0.5, // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
            thresholds: customThresholds
        )
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        simulateAppWork()
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        PerformanceMonitor.shared.collectMetricsNow()
        PerformanceMonitor.shared.collectMetricsNow()
        PerformanceMonitor.shared.collectMetricsNow()
        
        print("üìà –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: \(PerformanceMonitor.shared.collectedDataCount)")
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        generateReport()
        
        // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        PerformanceMonitor.shared.clearData()
        print("üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å: \(PerformanceMonitor.shared.collectedDataCount)")
        
        PerformanceMonitor.shared.stop()
    }
    
    private func simulateAppWork() {
        print("‚öôÔ∏è –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        // –°–∏–º—É–ª—è—Ü–∏—è CPU –Ω–∞–≥—Ä—É–∑–∫–∏
        for _ in 0..<1000 {
            _ = sqrt(Double.random(in: 1...1000))
        }
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é
        var data: [String] = []
        for i in 0..<100 {
            data.append("Test data \(i)")
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        Thread.sleep(forTimeInterval: 0.1)
    }
    
    private func generateReport() {
        print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        PerformanceMonitor.shared.generateReport(formats: [.json, .csv]) { result in
            switch result {
            case .success(let urls):
                print("‚úÖ –û—Ç—á–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:")
                for url in urls {
                    print("   - \(url.lastPathComponent)")
                }
            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: \(error)")
            }
        }
    }
}

// MARK: - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞

func runExample() {
    let example = ExampleUsage()
    
    print("=" * 50)
    print("PerformanceMonitor - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    example.basicUsage()
    example.advancedUsage()
    
    print("\n" + "=" * 50)
    print("–ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("=" * 50)
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
extension String {
    static func *(lhs: String, rhs: Int) -> String {
        return String(repeating: lhs, count: rhs)
    }
}

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞:
// runExample() 