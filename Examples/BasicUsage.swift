import Foundation
#if canImport(PerformanceMonitor)
import PerformanceMonitor
#endif

/// –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PerformanceMonitor
class BasicUsageExample {
    
    private let monitor = PerformanceMonitor.shared
    
    func runExample() {
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PerformanceMonitor")
        
        // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        let customThresholds = PerformanceThresholds(
            cpuUsageWarning: 70.0,
            cpuUsageCritical: 90.0,
            memoryUsageWarning: 200.0,
            memoryUsageCritical: 400.0,
            fpsWarning: 45.0,
            fpsCritical: 30.0,
            batteryLevelWarning: 20.0,
            batteryLevelCritical: 10.0
        )
        
        // 2. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫—É–Ω–¥—ã
        monitor.start(interval: 2.0, thresholds: customThresholds)
        
        // 3. –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        simulateAppWork()
        
        // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
            self.printCurrentMetrics()
            
            // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            self.generateReport()
            
            // 6. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                self.monitor.stop()
                print("‚úÖ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
            }
        }
    }
    
    private func simulateAppWork() {
        print("üíº –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        // –°–∏–º—É–ª—è—Ü–∏—è CPU –Ω–∞–≥—Ä—É–∑–∫–∏
        DispatchQueue.global(qos: .userInitiated).async {
            for i in 0..<1000000 {
                _ = sqrt(Double(i))
            }
        }
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            self.simulateNetworkRequests()
        }
    }
    
    private func simulateNetworkRequests() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for i in 0..<5 {
            DispatchQueue.main.asyncAfter(deadline: .now() + Double(i) * 0.5) {
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                print("üåê –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ #\(i + 1)")
            }
        }
    }
    
    private func printCurrentMetrics() {
        print("\nüìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        
        let metrics = monitor.getCurrentMetrics()
        
        print("üî• CPU: \(String(format: "%.1f", metrics.cpuUsage))%")
        print("üíæ –ü–∞–º—è—Ç—å: \(String(format: "%.1f", metrics.memoryUsage)) –ú–ë")
        print("üéÆ FPS: \(String(format: "%.1f", metrics.fps))")
        
        if let batteryLevel = metrics.batteryLevel {
            print("üîã –ë–∞—Ç–∞—Ä–µ—è: \(String(format: "%.0f", batteryLevel))%")
        }
        
        if let screenName = metrics.currentScreen {
            print("üì± –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω: \(screenName)")
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let analysis = monitor.getPerformanceAnalysis()
        print("\nüéØ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print("üìà –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: \(analysis.overallScore)/100")
        print("‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: \(analysis.anomalies.count)")
        
        if !analysis.recommendations.isEmpty {
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for recommendation in analysis.recommendations {
                print("  ‚Ä¢ \(recommendation)")
            }
        }
    }
    
    private func generateReport() {
        print("\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        monitor.generateReport(formats: [.json]) { result in
            switch result {
            case .success(let urls):
                print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                for url in urls {
                    print("  üìÅ \(url.lastPathComponent)")
                }
            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: \(error.localizedDescription)")
            }
        }
    }
}

// MARK: - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞

func runBasicExample() {
    let example = BasicUsageExample()
    example.runExample()
}

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞:
// runBasicExample() 