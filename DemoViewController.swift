import UIKit
import PerformanceMonitor

class DemoViewController: UIViewController {
    
    @IBOutlet weak var statusLabel: UILabel!
    @IBOutlet weak var metricsLabel: UILabel!
    @IBOutlet weak var startDemoButton: UIButton!
    @IBOutlet weak var stopDemoButton: UIButton!
    @IBOutlet weak var testSpecificButton: UIButton!
    @IBOutlet weak var currentMetricsButton: UIButton!
    
    private let demo = PerformanceMonitorDemo()
    private var metricsTimer: Timer?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        startMetricsDisplay()
    }
    
    private func setupUI() {
        title = "PerformanceMonitor Demo"
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        startDemoButton.setTitle("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é", for: .normal)
        stopDemoButton.setTitle("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é", for: .normal)
        testSpecificButton.setTitle("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∑–∫–∏–π FPS", for: .normal)
        currentMetricsButton.setTitle("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏", for: .normal)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–π–±–ª–æ–≤
        statusLabel.text = "–ì–æ—Ç–æ–≤ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
        statusLabel.numberOfLines = 0
        statusLabel.textAlignment = .center
        
        metricsLabel.text = "–ú–µ—Ç—Ä–∏–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å"
        metricsLabel.numberOfLines = 0
        metricsLabel.font = UIFont.monospacedSystemFont(ofSize: 12, weight: .regular)
        
        stopDemoButton.isEnabled = false
    }
    
    private func startMetricsDisplay() {
        metricsTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in
            self.updateMetricsDisplay()
        }
    }
    
    private func updateMetricsDisplay() {
        if PerformanceMonitor.shared.isRunning,
           let metrics = PerformanceMonitor.shared.getCurrentMetrics() {
            
            let formatter = DateFormatter()
            formatter.timeStyle = .medium
            
            let metricsText = """
            üìä –¢–ï–ö–£–©–ò–ï –ú–ï–¢–†–ò–ö–ò:
            ‚è∞ –í—Ä–µ–º—è: \(formatter.string(from: metrics.timestamp))
            üéÆ FPS: \(String(format: "%.1f", metrics.fps))
            ‚ö° CPU: \(String(format: "%.1f", metrics.cpuUsage))%
            üíæ –ü–∞–º—è—Ç—å: \(String(format: "%.1f", metrics.memoryUsage)) MB
            üîã –ë–∞—Ç–∞—Ä–µ—è: \(metrics.batteryLevel?.description ?? "N/A")%
            üì± –≠–∫—Ä–∞–Ω: \(metrics.screenName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            üåê –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: \(metrics.networkRequests.count)
            
            üìà –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: \(PerformanceMonitor.shared.collectedDataCount)
            """
            
            metricsLabel.text = metricsText
        } else {
            metricsLabel.text = "PerformanceMonitor –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        }
    }
    
    // MARK: - Actions
    
    @IBAction func startFullDemo(_ sender: UIButton) {
        statusLabel.text = "üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è...\n–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π"
        
        startDemoButton.isEnabled = false
        stopDemoButton.isEnabled = true
        
        demo.startFullDemo()
        
        // –ß–µ—Ä–µ–∑ 35 —Å–µ–∫—É–Ω–¥ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ
        DispatchQueue.main.asyncAfter(deadline: .now() + 35.0) {
            self.startDemoButton.isEnabled = true
            self.stopDemoButton.isEnabled = false
            self.statusLabel.text = "‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
        }
    }
    
    @IBAction func stopDemo(_ sender: UIButton) {
        demo.stopDemo()
        startDemoButton.isEnabled = true
        stopDemoButton.isEnabled = false
        statusLabel.text = "üõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    }
    
    @IBAction func testSpecificAnomaly(_ sender: UIButton) {
        let alert = UIAlertController(
            title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            message: nil,
            preferredStyle: .actionSheet
        )
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        for anomalyType in AnomalyType.allCases {
            let action = UIAlertAction(
                title: getDisplayName(for: anomalyType),
                style: .default
            ) { _ in
                self.testAnomaly(anomalyType)
            }
            alert.addAction(action)
        }
        
        alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
        
        present(alert, animated: true)
    }
    
    @IBAction func showCurrentMetrics(_ sender: UIButton) {
        if PerformanceMonitor.shared.isRunning {
            let analysis = PerformanceMonitor.shared.getPerformanceAnalysis()
            
            let message = """
            üìä –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: \(analysis.totalDataPoints)
            üéÆ –°—Ä–µ–¥–Ω–∏–π FPS: \(String(format: "%.1f", analysis.averageFPS))
            ‚ö° –°—Ä–µ–¥–Ω–∏–π CPU: \(String(format: "%.1f", analysis.averageCPU))%
            üíæ –°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å: \(String(format: "%.1f", analysis.averageMemory)) MB
            üö® –ê–Ω–æ–º–∞–ª–∏–π: \(analysis.anomalies.count)
            üèÜ –û—Ü–µ–Ω–∫–∞: \(analysis.overallScore)/100
            """
            
            let alert = UIAlertController(
                title: "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                message: message,
                preferredStyle: .alert
            )
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            present(alert, animated: true)
        } else {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            PerformanceMonitor.shared.start()
            statusLabel.text = "‚ñ∂Ô∏è –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω"
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
                self.showCurrentMetrics(sender)
            }
        }
    }
    
    private func testAnomaly(_ type: AnomalyType) {
        statusLabel.text = "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è: \(getDisplayName(for: type))"
        
        startDemoButton.isEnabled = false
        stopDemoButton.isEnabled = true
        
        demo.testSpecificAnomaly(type)
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 12.0) {
            self.startDemoButton.isEnabled = true
            self.stopDemoButton.isEnabled = false
            self.statusLabel.text = "‚úÖ –¢–µ—Å—Ç \(self.getDisplayName(for: type)) –∑–∞–≤–µ—Ä—à–µ–Ω"
        }
    }
    
    private func getDisplayName(for anomalyType: AnomalyType) -> String {
        switch anomalyType {
        case .lowFPS: return "üéÆ –ù–∏–∑–∫–∏–π FPS"
        case .highCPU: return "‚ö° –í—ã—Å–æ–∫–∏–π CPU"
        case .highMemory: return "üíæ –í—ã—Å–æ–∫–∞—è –ø–∞–º—è—Ç—å"
        case .memorySpike: return "üî• –°–∫–∞—á–∫–∏ –ø–∞–º—è—Ç–∏"
        case .slowNetworkRequest: return "üåê –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–µ—Ç—å"
        case .batteryDrain: return "üîã –†–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏"
        }
    }
    
    deinit {
        metricsTimer?.invalidate()
        demo.stopDemo()
    }
}

// MARK: - Storyboard Setup
/*
–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ ViewController –≤ Storyboard:

1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π ViewController –≤ Interface Builder
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∞—Å—Å –∫–∞–∫ DemoViewController
3. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫ –∞—É—Ç–ª–µ—Ç–∞–º:
   - UILabel –¥–ª—è statusLabel (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π, –ø–æ —Ü–µ–Ω—Ç—Ä—É)
   - UILabel –¥–ª—è metricsLabel (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π, –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç)
   - UIButton –¥–ª—è startDemoButton
   - UIButton –¥–ª—è stopDemoButton
   - UIButton –¥–ª—è testSpecificButton
   - UIButton –¥–ª—è currentMetricsButton

4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–æ–∫ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º IBAction –º–µ—Ç–æ–¥–∞–º

5. –î–æ–±–∞–≤—å—Ç–µ Auto Layout –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
*/

// MARK: - –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ UI
extension DemoViewController {
    
    /// –°–æ–∑–¥–∞–µ—Ç UI –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Storyboard
    func setupProgrammaticUI() {
        view.backgroundColor = .systemBackground
        
        let scrollView = UIScrollView()
        let contentView = UIView()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ scroll view
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        contentView.translatesAutoresizingMaskIntoConstraints = false
        
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
        statusLabel = UILabel()
        metricsLabel = UILabel()
        startDemoButton = UIButton(type: .system)
        stopDemoButton = UIButton(type: .system)
        testSpecificButton = UIButton(type: .system)
        currentMetricsButton = UIButton(type: .system)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        [statusLabel, metricsLabel, startDemoButton, stopDemoButton, testSpecificButton, currentMetricsButton].forEach {
            $0.translatesAutoresizingMaskIntoConstraints = false
            contentView.addSubview($0)
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        [startDemoButton, stopDemoButton, testSpecificButton, currentMetricsButton].forEach { button in
            button.backgroundColor = .systemBlue
            button.setTitleColor(.white, for: .normal)
            button.layer.cornerRadius = 8
            button.contentEdgeInsets = UIEdgeInsets(top: 12, left: 16, bottom: 12, right: 16)
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–π–±–ª–æ–≤
        statusLabel.textAlignment = .center
        statusLabel.numberOfLines = 0
        statusLabel.font = .systemFont(ofSize: 16, weight: .medium)
        
        metricsLabel.numberOfLines = 0
        metricsLabel.font = .monospacedSystemFont(ofSize: 12, weight: .regular)
        metricsLabel.backgroundColor = .systemGray6
        metricsLabel.layer.cornerRadius = 8
        metricsLabel.layer.masksToBounds = true
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        startDemoButton.addTarget(self, action: #selector(startFullDemo(_:)), for: .touchUpInside)
        stopDemoButton.addTarget(self, action: #selector(stopDemo(_:)), for: .touchUpInside)
        testSpecificButton.addTarget(self, action: #selector(testSpecificAnomaly(_:)), for: .touchUpInside)
        currentMetricsButton.addTarget(self, action: #selector(showCurrentMetrics(_:)), for: .touchUpInside)
        
        // Auto Layout
        NSLayoutConstraint.activate([
            // Scroll View
            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            // Content View
            contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),
            
            // UI Elements
            statusLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 20),
            statusLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            statusLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            
            startDemoButton.topAnchor.constraint(equalTo: statusLabel.bottomAnchor, constant: 20),
            startDemoButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            startDemoButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            startDemoButton.heightAnchor.constraint(equalToConstant: 50),
            
            stopDemoButton.topAnchor.constraint(equalTo: startDemoButton.bottomAnchor, constant: 12),
            stopDemoButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            stopDemoButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            stopDemoButton.heightAnchor.constraint(equalToConstant: 50),
            
            testSpecificButton.topAnchor.constraint(equalTo: stopDemoButton.bottomAnchor, constant: 12),
            testSpecificButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            testSpecificButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            testSpecificButton.heightAnchor.constraint(equalToConstant: 50),
            
            currentMetricsButton.topAnchor.constraint(equalTo: testSpecificButton.bottomAnchor, constant: 12),
            currentMetricsButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            currentMetricsButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            currentMetricsButton.heightAnchor.constraint(equalToConstant: 50),
            
            metricsLabel.topAnchor.constraint(equalTo: currentMetricsButton.bottomAnchor, constant: 20),
            metricsLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            metricsLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            metricsLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -20),
            metricsLabel.heightAnchor.constraint(greaterThanOrEqualToConstant: 200)
        ])
    }
} 