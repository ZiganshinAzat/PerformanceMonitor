import UIKit
import PerformanceMonitor

class DemoViewController: UIViewController {
    
    // UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    private let statusLabel = UILabel()
    private let metricsLabel = UILabel()
    private let startDemoButton = UIButton(type: .system)
    private let stopDemoButton = UIButton(type: .system)
    private let testSpecificButton = UIButton(type: .system)
    private let currentMetricsButton = UIButton(type: .system)
    private let scrollView = UIScrollView()
    private let contentView = UIView()
    
    private let demo = PerformanceMonitorDemo()
    private var metricsTimer: Timer?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupConstraints()
        startMetricsDisplay()
    }
    
    private func setupUI() {
        title = "PerformanceMonitor Demo"
        view.backgroundColor = .systemBackground
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ scroll view
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        contentView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç—É—Å –ª–µ–π–±–ª–∞
        statusLabel.text = "–ì–æ—Ç–æ–≤ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
        statusLabel.numberOfLines = 0
        statusLabel.textAlignment = .center
        statusLabel.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        statusLabel.textColor = .label
        statusLabel.translatesAutoresizingMaskIntoConstraints = false
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–π–±–ª–∞ –º–µ—Ç—Ä–∏–∫
        metricsLabel.text = "–ú–µ—Ç—Ä–∏–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å"
        metricsLabel.numberOfLines = 0
        metricsLabel.font = UIFont.monospacedSystemFont(ofSize: 12, weight: .regular)
        metricsLabel.textColor = .secondaryLabel
        metricsLabel.backgroundColor = .secondarySystemBackground
        metricsLabel.layer.cornerRadius = 8
        metricsLabel.layer.masksToBounds = true
        metricsLabel.translatesAutoresizingMaskIntoConstraints = false
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª–µ–π–±–ª–∞ –º–µ—Ç—Ä–∏–∫
        let metricsContainer = UIView()
        metricsContainer.backgroundColor = .secondarySystemBackground
        metricsContainer.layer.cornerRadius = 8
        metricsContainer.translatesAutoresizingMaskIntoConstraints = false
        metricsContainer.addSubview(metricsLabel)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        setupButton(startDemoButton, title: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é", backgroundColor: .systemBlue)
        setupButton(stopDemoButton, title: "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é", backgroundColor: .systemRed)
        setupButton(testSpecificButton, title: "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏", backgroundColor: .systemOrange)
        setupButton(currentMetricsButton, title: "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑", backgroundColor: .systemGreen)
        
        stopDemoButton.isEnabled = false
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ contentView
        contentView.addSubview(statusLabel)
        contentView.addSubview(metricsContainer)
        contentView.addSubview(startDemoButton)
        contentView.addSubview(stopDemoButton)
        contentView.addSubview(testSpecificButton)
        contentView.addSubview(currentMetricsButton)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ constraints –¥–ª—è metricsLabel –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        NSLayoutConstraint.activate([
            metricsLabel.topAnchor.constraint(equalTo: metricsContainer.topAnchor, constant: 12),
            metricsLabel.leadingAnchor.constraint(equalTo: metricsContainer.leadingAnchor, constant: 12),
            metricsLabel.trailingAnchor.constraint(equalTo: metricsContainer.trailingAnchor, constant: -12),
            metricsLabel.bottomAnchor.constraint(equalTo: metricsContainer.bottomAnchor, constant: -12)
        ])
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ metricsContainer –¥–ª—è constraints
        metricsContainer.tag = 999
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        startDemoButton.addTarget(self, action: #selector(startFullDemo), for: .touchUpInside)
        stopDemoButton.addTarget(self, action: #selector(stopDemo), for: .touchUpInside)
        testSpecificButton.addTarget(self, action: #selector(testSpecificAnomaly), for: .touchUpInside)
        currentMetricsButton.addTarget(self, action: #selector(showCurrentMetrics), for: .touchUpInside)
    }
    
    private func setupButton(_ button: UIButton, title: String, backgroundColor: UIColor) {
        button.setTitle(title, for: .normal)
        button.backgroundColor = backgroundColor
        button.setTitleColor(.white, for: .normal)
        button.setTitleColor(.lightGray, for: .disabled)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        button.layer.cornerRadius = 8
        button.translatesAutoresizingMaskIntoConstraints = false
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
        button.layer.shadowColor = UIColor.black.cgColor
        button.layer.shadowOffset = CGSize(width: 0, height: 2)
        button.layer.shadowOpacity = 0.1
        button.layer.shadowRadius = 4
    }
    
    private func setupConstraints() {
        let metricsContainer = contentView.viewWithTag(999)!
        
        NSLayoutConstraint.activate([
            // ScrollView constraints
            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            // ContentView constraints
            contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),
            
            // Status label constraints
            statusLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 20),
            statusLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            statusLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            // Metrics container constraints
            metricsContainer.topAnchor.constraint(equalTo: statusLabel.bottomAnchor, constant: 20),
            metricsContainer.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            metricsContainer.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            metricsContainer.heightAnchor.constraint(greaterThanOrEqualToConstant: 200),
            
            // Start demo button constraints
            startDemoButton.topAnchor.constraint(equalTo: metricsContainer.bottomAnchor, constant: 30),
            startDemoButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            startDemoButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            startDemoButton.heightAnchor.constraint(equalToConstant: 50),
            
            // Stop demo button constraints
            stopDemoButton.topAnchor.constraint(equalTo: startDemoButton.bottomAnchor, constant: 15),
            stopDemoButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            stopDemoButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            stopDemoButton.heightAnchor.constraint(equalToConstant: 50),
            
            // Test specific button constraints
            testSpecificButton.topAnchor.constraint(equalTo: stopDemoButton.bottomAnchor, constant: 15),
            testSpecificButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            testSpecificButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            testSpecificButton.heightAnchor.constraint(equalToConstant: 50),
            
            // Current metrics button constraints
            currentMetricsButton.topAnchor.constraint(equalTo: testSpecificButton.bottomAnchor, constant: 15),
            currentMetricsButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            currentMetricsButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            currentMetricsButton.heightAnchor.constraint(equalToConstant: 50),
            currentMetricsButton.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -30)
        ])
    }
    
    private func startMetricsDisplay() {
        metricsTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in
            self.updateMetricsDisplay()
        }
    }
    
    private func updateMetricsDisplay() {
        if PerformanceMonitor.shared.isRunning,
           let metrics = PerformanceMonitor.shared.getCurrentMetrics() {
            
            let formatter = DateFormatter()
            formatter.timeStyle = .medium
            
            let metricsText = """
            üìä –¢–ï–ö–£–©–ò–ï –ú–ï–¢–†–ò–ö–ò:
            ‚è∞ –í—Ä–µ–º—è: \(formatter.string(from: metrics.timestamp))
            üéÆ FPS: \(String(format: "%.1f", metrics.fps))
            ‚ö° CPU: \(String(format: "%.1f", metrics.cpuUsage))%
            üíæ –ü–∞–º—è—Ç—å: \(String(format: "%.1f", metrics.memoryUsage)) MB
            üîã –ë–∞—Ç–∞—Ä–µ—è: \(metrics.batteryLevel?.description ?? "N/A")%
            üì± –≠–∫—Ä–∞–Ω: \(metrics.screenName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            üåê –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: \(metrics.networkRequests.count)
            
            üìà –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: \(PerformanceMonitor.shared.collectedDataCount)
            """
            
            metricsLabel.text = metricsText
        } else {
            metricsLabel.text = "PerformanceMonitor –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω\n\n–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n—á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"
        }
    }
    
    // MARK: - Actions
    
    @objc private func startFullDemo() {
        statusLabel.text = "üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è...\n–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π"
        
        startDemoButton.isEnabled = false
        stopDemoButton.isEnabled = true
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        UIView.animate(withDuration: 0.3) {
            self.startDemoButton.alpha = 0.5
            self.stopDemoButton.alpha = 1.0
        }
        
        demo.startFullDemo()
        
        // –ß–µ—Ä–µ–∑ 50 —Å–µ–∫—É–Ω–¥ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ (—É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        DispatchQueue.main.asyncAfter(deadline: .now() + 50.0) {
            self.startDemoButton.isEnabled = true
            self.stopDemoButton.isEnabled = false
            self.statusLabel.text = "‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
            
            UIView.animate(withDuration: 0.3) {
                self.startDemoButton.alpha = 1.0
                self.stopDemoButton.alpha = 0.5
            }
        }
    }
    
    @objc private func stopDemo() {
        demo.stopDemo()
        startDemoButton.isEnabled = true
        stopDemoButton.isEnabled = false
        statusLabel.text = "üõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        UIView.animate(withDuration: 0.3) {
            self.startDemoButton.alpha = 1.0
            self.stopDemoButton.alpha = 0.5
        }
    }
    
    @objc private func testSpecificAnomaly() {
        let alert = UIAlertController(
            title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            message: nil,
            preferredStyle: .actionSheet
        )
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        for anomalyType in AnomalyType.allCases {
            let action = UIAlertAction(
                title: getDisplayName(for: anomalyType),
                style: .default
            ) { _ in
                self.testAnomaly(anomalyType)
            }
            alert.addAction(action)
        }
        
        alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
        
        // –î–ª—è iPad
        if let popover = alert.popoverPresentationController {
            popover.sourceView = testSpecificButton
            popover.sourceRect = testSpecificButton.bounds
        }
        
        present(alert, animated: true)
    }
    
    @objc private func showCurrentMetrics() {
        if PerformanceMonitor.shared.isRunning {
            let analysis = PerformanceMonitor.shared.getPerformanceAnalysis()
            
            let message = """
            üìä –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: \(analysis.totalDataPoints)
            üéÆ –°—Ä–µ–¥–Ω–∏–π FPS: \(String(format: "%.1f", analysis.averageFPS))
            ‚ö° –°—Ä–µ–¥–Ω–∏–π CPU: \(String(format: "%.1f", analysis.averageCPU))%
            üíæ –°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å: \(String(format: "%.1f", analysis.averageMemory)) MB
            üö® –ê–Ω–æ–º–∞–ª–∏–π: \(analysis.anomalies.count)
            üèÜ –û—Ü–µ–Ω–∫–∞: \(analysis.overallScore)/100
            """
            
            let alert = UIAlertController(
                title: "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                message: message,
                preferredStyle: .alert
            )
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            present(alert, animated: true)
        } else {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            PerformanceMonitor.shared.start()
            statusLabel.text = "‚ñ∂Ô∏è –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω"
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
                self.showCurrentMetrics()
            }
        }
    }
    
    private func testAnomaly(_ type: AnomalyType) {
        statusLabel.text = "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è: \(getDisplayName(for: type))"
        
        startDemoButton.isEnabled = false
        stopDemoButton.isEnabled = true
        
        UIView.animate(withDuration: 0.3) {
            self.startDemoButton.alpha = 0.5
            self.stopDemoButton.alpha = 1.0
        }
        
        demo.testSpecificAnomaly(type)
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 12.0) {
            self.startDemoButton.isEnabled = true
            self.stopDemoButton.isEnabled = false
            self.statusLabel.text = "‚úÖ –¢–µ—Å—Ç \(self.getDisplayName(for: type)) –∑–∞–≤–µ—Ä—à–µ–Ω"
            
            UIView.animate(withDuration: 0.3) {
                self.startDemoButton.alpha = 1.0
                self.stopDemoButton.alpha = 0.5
            }
        }
    }
    
    private func getDisplayName(for anomalyType: AnomalyType) -> String {
        switch anomalyType {
        case .lowFPS: return "üéÆ –ù–∏–∑–∫–∏–π FPS"
        case .highCPU: return "‚ö° –í—ã—Å–æ–∫–∏–π CPU"
        case .highMemory: return "üíæ –í—ã—Å–æ–∫–∞—è –ø–∞–º—è—Ç—å"
        case .memorySpike: return "üî• –°–∫–∞—á–∫–∏ –ø–∞–º—è—Ç–∏"
        case .slowNetworkRequest: return "üåê –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–µ—Ç—å"
        case .batteryDrain: return "üîã –†–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏"
        }
    }
    
    deinit {
        metricsTimer?.invalidate()
        demo.stopDemo()
    }
}