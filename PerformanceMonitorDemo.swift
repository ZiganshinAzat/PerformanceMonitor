import Foundation
import UIKit
import PerformanceMonitor

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π PerformanceMonitor
/// –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
class PerformanceMonitorDemo {
    
    private var timer: Timer?
    private var heavyComputationTimer: Timer?
    private var memoryHogArray: [Data] = []
    
    // MARK: - –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∞–Ω–æ–º–∞–ª–∏–π
    func startFullDemo() {
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ PerformanceMonitor")
        print("üìä –ë—É–¥—É—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π:")
        print("   - –ù–∏–∑–∫–∏–π FPS")
        print("   - –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU")
        print("   - –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        print("   - –°–∫–∞—á–∫–∏ –ø–∞–º—è—Ç–∏")
        print("   - –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        print()
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–æ–º–∞–ª–∏–π
        let demoThresholds = PerformanceThresholds(
            minFPS: 58.0,      // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è FPS - –ª—é–±–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–Ω–æ–º–∞–ª–∏–µ–π
            maxCPU: 30.0,      // –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è CPU - –ø–æ—á—Ç–∏ –ª—é–±–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –∞–Ω–æ–º–∞–ª–∏–µ–π
            maxMemory: 80.0,   // –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–∞–º—è—Ç–∏
            maxNetworkDuration: 1.5, // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–µ—Ç–∏
            memorySpikeFactor: 1.2   // –û—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∫–∞—á–∫–æ–≤ –ø–∞–º—è—Ç–∏
        )
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –æ—á–µ–Ω—å —á–∞—Å—Ç—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
        PerformanceMonitor.shared.start(interval: 0.3, thresholds: demoThresholds)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            self.simulateLowFPS()
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
            self.simulateHighCPUUsage()
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 10.0) {
            self.simulateHighMemoryUsage()
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 15.0) {
            self.simulateMemorySpikes()
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 20.0) {
            self.simulateSlowNetworkRequests()
        }
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª—ã –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        DispatchQueue.main.asyncAfter(deadline: .now() + 25.0) {
            print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ü–∏–∫–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–æ–º–∞–ª–∏–π...")
            self.simulateLowFPS()
            self.simulateHighCPUUsage()
            self.simulateHighMemoryUsage()
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 30.0) {
            self.simulateMemorySpikes()
            self.simulateSlowNetworkRequests()
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
        DispatchQueue.main.asyncAfter(deadline: .now() + 45.0) {
            self.finishDemo()
        }
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
    func stopDemo() {
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        
        timer?.invalidate()
        timer = nil
        
        heavyComputationTimer?.invalidate()
        heavyComputationTimer = nil
        
        memoryHogArray.removeAll()
        
        PerformanceMonitor.shared.stop()
    }
    
    // MARK: - –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π
    
    /// –°–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–∏–∑–∫–∏–π FPS —á–µ—Ä–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    private func simulateLowFPS() {
        print("üéÆ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∏–∑–∫–æ–≥–æ FPS...")
        
        // –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å —Ç—è–∂–µ–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–æ–º–∞–ª–∏–π FPS
        timer = Timer.scheduledTimer(withTimeInterval: 0.05, repeats: true) { _ in
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –Ω–∞ 80-150ms –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è FPS
            let blockTime = Double.random(in: 0.08...0.15)
            let endTime = CFAbsoluteTimeGetCurrent() + blockTime
            
            while CFAbsoluteTimeGetCurrent() < endTime {
                // –ë–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞
                for i in 0..<1000 {
                    _ = sin(Double(i)) * cos(Double(i)) * tan(Double(i)) * log(Double(i + 1))
                }
            }
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–æ–º–∞–ª–∏–π
        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
            self.timer?.invalidate()
            self.timer = nil
            print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –Ω–∏–∑–∫–æ–≥–æ FPS –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        }
    }
    
    /// –°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É CPU
    private func simulateHighCPUUsage() {
        print("‚ö° –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CPU...")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–ª—å—à–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å –æ—á–µ–Ω—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏
        for i in 0..<8 {
            DispatchQueue.global(qos: .userInitiated).async {
                let endTime = CFAbsoluteTimeGetCurrent() + 6.0
                
                while CFAbsoluteTimeGetCurrent() < endTime {
                    // –û—á–µ–Ω—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                    var result = 0.0
                    for j in 0..<50000 {
                        result += sin(Double(j)) * cos(Double(j)) * tan(Double(j)) * sqrt(Double(j + 1))
                    }
                    
                    // –£–±–∏—Ä–∞–µ–º –ø–∞—É–∑—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ CPU
                    // Thread.sleep(forTimeInterval: 0.001)
                }
                
                if i == 0 {
                    DispatchQueue.main.async {
                        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CPU –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    }
                }
            }
        }
    }
    
    /// –°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    private func simulateHighMemoryUsage() {
        print("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        // –û—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –≤—ã–¥–µ–ª—è–µ–º –±–æ–ª—å—à–∏–µ –±–ª–æ–∫–∏ –ø–∞–º—è—Ç–∏
        heavyComputationTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { _ in
            // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ 15MB –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏
            let dataSize = 15 * 1024 * 1024 // 15 MB
            let data = Data(count: dataSize)
            self.memoryHogArray.append(data)
            
            print("üìà –í—ã–¥–µ–ª–µ–Ω–æ –µ—â–µ 15MB –ø–∞–º—è—Ç–∏ (–≤—Å–µ–≥–æ: \(self.memoryHogArray.count * 15)MB)")
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–æ–º–∞–ª–∏–π
        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
            self.heavyComputationTimer?.invalidate()
            self.heavyComputationTimer = nil
            print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        }
    }
    
    /// –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏ –ø–∞–º—è—Ç–∏
    private func simulateMemorySpikes() {
        print("üìä –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å–∫–∞—á–∫–æ–≤ –ø–∞–º—è—Ç–∏...")
        
        var spikeCount = 0
        
        func createMemorySpike() {
            guard spikeCount < 8 else {
                print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Å–∫–∞—á–∫–æ–≤ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return
            }
            
            spikeCount += 1
            
            // –†–µ–∑–∫–æ –≤—ã–¥–µ–ª—è–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –±–ª–æ–∫ –ø–∞–º—è—Ç–∏
            let spikeSize = 80 * 1024 * 1024 // 80 MB
            let spikeData = Data(count: spikeSize)
            memoryHogArray.append(spikeData)
            
            print("üî• –°–∫–∞—á–æ–∫ –ø–∞–º—è—Ç–∏ #\(spikeCount): –≤—ã–¥–µ–ª–µ–Ω–æ 80MB")
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∫–∞—á–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–∞—á–∫–æ–≤
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                createMemorySpike()
            }
        }
        
        createMemorySpike()
    }
    
    /// –°–∏–º—É–ª–∏—Ä—É–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    private func simulateSlowNetworkRequests() {
        print("üåê –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        let urls = [
            "https://httpbin.org/delay/2",  // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
            "https://httpbin.org/delay/3",  // 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
            "https://httpbin.org/delay/4",  // 4 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
            "https://httpbin.org/delay/5",  // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
            "https://httpbin.org/delay/2",  // –ï—â–µ –æ–¥–∏–Ω 2-—Å–µ–∫—É–Ω–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            "https://httpbin.org/delay/3",  // –ï—â–µ –æ–¥–∏–Ω 3-—Å–µ–∫—É–Ω–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            "https://httpbin.org/delay/6",  // 6 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            "https://httpbin.org/delay/7",  // 7 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
        ]
        
        for (index, urlString) in urls.enumerated() {
            guard let url = URL(string: urlString) else { continue }
            
            DispatchQueue.main.asyncAfter(deadline: .now() + Double(index)) {
                print("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å #\(index + 1)...")
                
                let task = URLSession.shared.dataTask(with: url) { data, response, error in
                    DispatchQueue.main.async {
                        if let error = error {
                            print("‚ùå –ó–∞–ø—Ä–æ—Å #\(index + 1) –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: \(error)")
                        } else {
                            print("‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å #\(index + 1) –∑–∞–≤–µ—Ä—à–µ–Ω")
                        }
                        
                        if index == urls.count - 1 {
                            print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                        }
                    }
                }
                task.resume()
            }
        }
    }
    
    /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç
    private func finishDemo() {
        print("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let analysis = PerformanceMonitor.shared.getPerformanceAnalysis()
        
        print("\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        print("üìä –°–æ–±—Ä–∞–Ω–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: \(analysis.totalDataPoints)")
        print("üéÆ –°—Ä–µ–¥–Ω–∏–π FPS: \(String(format: "%.1f", analysis.averageFPS))")
        print("‚ö° –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: \(String(format: "%.1f", analysis.averageCPU))%")
        print("üíæ –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: \(String(format: "%.1f", analysis.averageMemory)) MB")
        print("üî• –ü–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: \(String(format: "%.1f", analysis.peakMemory)) MB")
        print("üèÜ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: \(analysis.overallScore)/100")
        
        print("\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ê–ù–û–ú–ê–õ–ò–ò (\(analysis.anomalies.count)):")
        print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        
        let groupedAnomalies = Dictionary(grouping: analysis.anomalies) { $0.type }
        
        for anomalyType in AnomalyType.allCases {
            if let anomalies = groupedAnomalies[anomalyType] {
                let typeEmoji = getEmojiForAnomalyType(anomalyType)
                print("\(typeEmoji) \(anomalyType.rawValue): \(anomalies.count) —Å–ª—É—á–∞–µ–≤")
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                for (index, anomaly) in anomalies.prefix(3).enumerated() {
                    let formatter = DateFormatter()
                    formatter.timeStyle = .medium
                    let timeString = formatter.string(from: anomaly.timestamp)
                    print("   \(index + 1). [\(timeString)] \(anomaly.description)")
                }
                
                if anomalies.count > 3 {
                    print("   ... –∏ –µ—â–µ \(anomalies.count - 3) —Å–ª—É—á–∞–µ–≤")
                }
                print()
            }
        }
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        for (index, recommendation) in analysis.recommendations.enumerated() {
            print("\(index + 1). \(recommendation)")
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
        PerformanceMonitor.shared.generateReport() { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let urls):
                    print("\nüìÑ –û–¢–ß–ï–¢–´ –°–û–ó–î–ê–ù–´:")
                    print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                    for url in urls {
                        print("üìÅ \(url.lastPathComponent): \(url.path)")
                    }
                    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è PerformanceMonitor —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: \(error)")
                }
                
                // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                self.stopDemo()
            }
        }
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private func getEmojiForAnomalyType(_ type: AnomalyType) -> String {
        switch type {
        case .lowFPS: return "üéÆ"
        case .highCPU: return "‚ö°"
        case .highMemory: return "üíæ"
        case .memorySpike: return "üî•"
        case .slowNetworkRequest: return "üåê"
        case .batteryDrain: return "üîã"
        }
    }
    
    /// –ú–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∞–Ω–æ–º–∞–ª–∏–∏
    func testSpecificAnomaly(_ type: AnomalyType) {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏: \(type.rawValue)")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        PerformanceMonitor.shared.start(interval: 0.5)
        
        switch type {
        case .lowFPS:
            simulateLowFPS()
        case .highCPU:
            simulateHighCPUUsage()
        case .highMemory:
            simulateHighMemoryUsage()
        case .memorySpike:
            simulateMemorySpikes()
        case .slowNetworkRequest:
            simulateSlowNetworkRequests()
        case .batteryDrain:
            print("‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏—è battery_drain —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Ä–∞–∑—Ä—è–¥–∫–∏ –±–∞—Ç–∞—Ä–µ–∏")
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        DispatchQueue.main.asyncAfter(deadline: .now() + 10.0) {
            let analysis = PerformanceMonitor.shared.getPerformanceAnalysis()
            let relevantAnomalies = analysis.anomalies.filter { $0.type == type }
            
            print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π —Ç–∏–ø–∞ \(type.rawValue): \(relevantAnomalies.count)")
            
            for anomaly in relevantAnomalies {
                print("   - \(anomaly.description)")
            }
            
            self.stopDemo()
        }
    }
}

// MARK: - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

/*
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:

// 1. –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∞–Ω–æ–º–∞–ª–∏–π
let demo = PerformanceMonitorDemo()
demo.startFullDemo()

// 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–Ω–æ–º–∞–ª–∏–∏
demo.testSpecificAnomaly(.lowFPS)

// 3. –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
PerformanceMonitor.shared.start()

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
if let metrics = PerformanceMonitor.shared.getCurrentMetrics() {
    print("–¢–µ–∫—É—â–∏–π FPS: \(metrics.fps)")
    print("–ó–∞–≥—Ä—É–∑–∫–∞ CPU: \(metrics.cpuUsage)%")
    print("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: \(metrics.memoryUsage) MB")
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
PerformanceMonitor.shared.stop()
*/
