import Foundation

/// –¢—Ä–µ–∫–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ (UIViewController)
final class UIViewControllerTracker {
    
    // MARK: - Static Properties
    
    nonisolated(unsafe) static weak var shared: UIViewControllerTracker?
    
    // MARK: - Properties
    
    private var isStarted = false
    private var currentScreen: String?
    private var screenHistory: [(name: String, timestamp: Date)] = []
    private let maxHistoryCount = 100
    
    // MARK: - Public Properties
    
    /// –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    var currentScreenName: String? {
        return currentScreen
    }
    
    /// –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
    var screenNavigationHistory: [(name: String, timestamp: Date)] {
        return Array(screenHistory)
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
    func start() {
        guard !isStarted else {
            print("‚ö†Ô∏è UIViewControllerTracker —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        }
        
        UIViewControllerTracker.shared = self
        isStarted = true
        
        print("‚úÖ UIViewControllerTracker –∑–∞–ø—É—â–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)")
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
    func stop() {
        guard isStarted else {
            print("‚ö†Ô∏è UIViewControllerTracker –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        }
        
        UIViewControllerTracker.shared = nil
        isStarted = false
        
        currentScreen = nil
        screenHistory.removeAll()
        
        print("üõë UIViewControllerTracker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    /// –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —ç–∫—Ä–∞–Ω–æ–≤
    func clearHistory() {
        screenHistory.removeAll()
    }
    
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —ç–∫—Ä–∞–Ω–∞–º
    func analyzeScreenNavigation() -> ScreenNavigationAnalysis {
        let history = screenNavigationHistory
        
        guard !history.isEmpty else {
            return ScreenNavigationAnalysis(
                totalScreens: 0,
                uniqueScreens: [],
                mostVisitedScreen: nil,
                averageTimePerScreen: 0,
                navigationPatterns: []
            )
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
        let uniqueScreens = Array(Set(history.map { $0.name }))
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –ø–æ—Å–µ—â–∞–µ–º—ã–π —ç–∫—Ä–∞–Ω
        let screenCounts = Dictionary(grouping: history, by: { $0.name })
            .mapValues { $0.count }
        let mostVisitedScreen = screenCounts.max(by: { $0.value < $1.value })?.key
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        var totalTime: TimeInterval = 0
        var screenCount = 0
        
        for i in 0..<(history.count - 1) {
            let currentScreen = history[i]
            let nextScreen = history[i + 1]
            
            if currentScreen.name != nextScreen.name {
                totalTime += nextScreen.timestamp.timeIntervalSince(currentScreen.timestamp)
                screenCount += 1
            }
        }
        
        let averageTimePerScreen = screenCount > 0 ? totalTime / Double(screenCount) : 0
        
        return ScreenNavigationAnalysis(
            totalScreens: history.count,
            uniqueScreens: uniqueScreens,
            mostVisitedScreen: mostVisitedScreen,
            averageTimePerScreen: averageTimePerScreen,
            navigationPatterns: []
        )
    }
}

// MARK: - Supporting Structures

struct ScreenNavigationAnalysis {
    let totalScreens: Int
    let uniqueScreens: [String]
    let mostVisitedScreen: String?
    let averageTimePerScreen: TimeInterval
    let navigationPatterns: [NavigationPattern]
}

struct NavigationPattern {
    let fromScreen: String
    let toScreen: String
    let frequency: Int
    let averageTransitionTime: TimeInterval
} 