@preconcurrency import Foundation
#if canImport(UIKit)
import UIKit
#endif

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ iOS-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
public final class PerformanceMonitor {
    
    // MARK: - Singleton
    
    nonisolated(unsafe) public static let shared = PerformanceMonitor()
    
    // MARK: - Private Properties
    
    private var isMonitoring = false
    private var performanceData: [PerformanceData] = []
    private var thresholds: PerformanceThresholds = .default
    private var monitoringTimer: Timer?
    
    private let queue = DispatchQueue(label: "com.performancemonitor.data", qos: .utility)
    
    // –¢—Ä–µ–∫–µ—Ä—ã
    private let fpsTracker = FPSTracker()
    private let cpuTracker = CPUTracker()
    private let metricKitProvider = MetricKitProvider()
    private let networkMonitor = NetworkMonitor()
    private let viewControllerTracker = UIViewControllerTracker()
    private let dataAnalyzer = DataAnalyzer()
    private let reportGenerator = ReportGenerator()
    
    // MARK: - Initialization
    
    private init() {
        setupDelegates()
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// - Parameter interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)
    /// - Parameter thresholds: –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
    public func start(interval: TimeInterval = 1.0, thresholds: PerformanceThresholds = .default) {
        guard !isMonitoring else {
            print("‚ö†Ô∏è PerformanceMonitor —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        }
        
        self.thresholds = thresholds
        isMonitoring = true
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–µ—Ä—ã
        fpsTracker.start()
        cpuTracker.start()
        metricKitProvider.start()
        networkMonitor.start()
        viewControllerTracker.start()
        
        print("‚úÖ PerformanceMonitor –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º \(interval)—Å")
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    public func stop() {
        guard isMonitoring else {
            print("‚ö†Ô∏è PerformanceMonitor –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        }
        
        isMonitoring = false
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–µ—Ä—ã
        fpsTracker.stop()
        cpuTracker.stop()
        metricKitProvider.stop()
        networkMonitor.stop()
        viewControllerTracker.stop()
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        monitoringTimer?.invalidate()
        monitoringTimer = nil
        
        print("üõë PerformanceMonitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// - Parameters:
    ///   - formats: –§–æ—Ä–º–∞—Ç—ã –æ—Ç—á–µ—Ç–∞ (PDF, JSON, CSV)
    ///   - completion: –ö–æ–ª–±—ç–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    public func generateReport(
        formats: [ReportFormat] = [.pdf, .json],
        completion: @escaping @Sendable (Result<[URL], Error>) -> Void
    ) {
        let analysis = self.dataAnalyzer.analyze(
            data: self.performanceData,
            thresholds: self.thresholds
        )
        
        do {
            let urls = try self.reportGenerator.generateReports(
                analysis: analysis,
                rawData: self.performanceData,
                formats: formats
            )
            completion(.success(urls))
        } catch {
            completion(.failure(error))
        }
    }
    
    /// –û—á–∏—â–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    public func clearData() {
        performanceData.removeAll()
        print("üóëÔ∏è –î–∞–Ω–Ω—ã–µ PerformanceMonitor –æ—á–∏—â–µ–Ω—ã")
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    @MainActor public func getCurrentMetrics() -> PerformanceData? {
        guard isMonitoring else { return nil }
        
        return PerformanceData(
            fps: fpsTracker.currentFPS,
            cpuUsage: cpuTracker.currentCPUUsage,
            memoryUsage: getCurrentMemoryUsage(),
            batteryLevel: getCurrentBatteryLevel(),
            screenName: viewControllerTracker.currentScreenName,
            networkRequests: networkMonitor.capturedRequests
        )
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    public var collectedDataCount: Int {
        return performanceData.count
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    public var isRunning: Bool {
        return isMonitoring
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    @MainActor public func collectMetricsNow() {
        collectMetrics()
    }
    
    // MARK: - Private Methods
    
    private func setupDelegates() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–ª–µ–≥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç—Ä–µ–∫–µ—Ä–æ–≤
        // networkMonitor.delegate = self // –ó–∞–≥–ª—É—à–∫–∞
    }
    
    @MainActor private func collectMetrics() {
        guard isMonitoring else { return }
        
        let metrics = PerformanceData(
            fps: self.fpsTracker.currentFPS,
            cpuUsage: self.cpuTracker.currentCPUUsage,
            memoryUsage: self.getCurrentMemoryUsage(),
            batteryLevel: self.getCurrentBatteryLevel(),
            screenName: self.viewControllerTracker.currentScreenName,
            networkRequests: self.networkMonitor.capturedRequests
        )
        
        self.performanceData.append(metrics)
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
        if self.performanceData.count > 1000 {
            self.performanceData.removeFirst(self.performanceData.count - 1000)
        }
    }
    
    private func getCurrentMemoryUsage() -> Double {
        // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 100 –¥–æ 300 MB
        return Double.random(in: 100...300)
    }
    
    @MainActor private func getCurrentBatteryLevel() -> Double? {
        #if canImport(UIKit)
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å MainActor
        return Double.random(in: 70...100)
        #else
        return nil
        #endif
    }
}

// MARK: - ReportFormat

public enum ReportFormat: String, CaseIterable, Sendable {
    case pdf = "pdf"
    case json = "json"
    case csv = "csv"
}
