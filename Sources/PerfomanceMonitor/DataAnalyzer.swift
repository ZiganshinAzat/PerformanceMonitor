import Foundation

/// –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
final class DataAnalyzer {
    
    // MARK: - Public Methods
    
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// - Parameters:
    ///   - data: –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    ///   - thresholds: –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    /// - Returns: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    func analyze(data: [PerformanceData], thresholds: PerformanceThresholds) -> PerformanceAnalysis {
        guard !data.isEmpty else {
            return PerformanceAnalysis(
                averageFPS: 0,
                averageCPU: 0,
                averageMemory: 0,
                peakMemory: 0,
                anomalies: [],
                recommendations: ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
                screenPerformance: [:]
            )
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        let averageFPS = data.map { $0.fps }.reduce(0, +) / Double(data.count)
        let averageCPU = data.map { $0.cpuUsage }.reduce(0, +) / Double(data.count)
        let averageMemory = data.map { $0.memoryUsage }.reduce(0, +) / Double(data.count)
        let peakMemory = data.map { $0.memoryUsage }.max() ?? 0
        
        // –í—ã—è–≤–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
        let anomalies = detectAnomalies(data: data, thresholds: thresholds)
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        let recommendations = generateRecommendations(
            averageFPS: averageFPS,
            averageCPU: averageCPU,
            averageMemory: averageMemory,
            peakMemory: peakMemory,
            anomalies: anomalies,
            thresholds: thresholds
        )
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —ç–∫—Ä–∞–Ω–∞–º
        let screenPerformance = analyzeScreenPerformance(data: data, thresholds: thresholds)
        
        return PerformanceAnalysis(
            averageFPS: averageFPS,
            averageCPU: averageCPU,
            averageMemory: averageMemory,
            peakMemory: peakMemory,
            anomalies: anomalies,
            recommendations: recommendations,
            screenPerformance: screenPerformance
        )
    }
    
    // MARK: - Private Methods
    
    private func detectAnomalies(data: [PerformanceData], thresholds: PerformanceThresholds) -> [PerformanceAnomaly] {
        var anomalies: [PerformanceAnomaly] = []
        var previousMemory: Double?
        
        for dataPoint in data {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º FPS
            if dataPoint.fps < thresholds.minFPS {
                anomalies.append(PerformanceAnomaly(
                    type: .lowFPS,
                    timestamp: dataPoint.timestamp,
                    value: dataPoint.fps,
                    threshold: thresholds.minFPS,
                    screenName: dataPoint.screenName,
                    description: "–ù–∏–∑–∫–∏–π FPS: \(String(format: "%.1f", dataPoint.fps)) (–ø–æ—Ä–æ–≥: \(thresholds.minFPS))"
                ))
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU
            if dataPoint.cpuUsage > thresholds.maxCPU {
                anomalies.append(PerformanceAnomaly(
                    type: .highCPU,
                    timestamp: dataPoint.timestamp,
                    value: dataPoint.cpuUsage,
                    threshold: thresholds.maxCPU,
                    screenName: dataPoint.screenName,
                    description: "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: \(String(format: "%.1f", dataPoint.cpuUsage))% (–ø–æ—Ä–æ–≥: \(thresholds.maxCPU)%)"
                ))
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
            if dataPoint.memoryUsage > thresholds.maxMemory {
                anomalies.append(PerformanceAnomaly(
                    type: .highMemory,
                    timestamp: dataPoint.timestamp,
                    value: dataPoint.memoryUsage,
                    threshold: thresholds.maxMemory,
                    screenName: dataPoint.screenName,
                    description: "–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: \(String(format: "%.1f", dataPoint.memoryUsage)) MB (–ø–æ—Ä–æ–≥: \(thresholds.maxMemory) MB)"
                ))
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∞—á–∫–∏ –ø–∞–º—è—Ç–∏
            if let prevMemory = previousMemory {
                let memoryIncrease = dataPoint.memoryUsage / prevMemory
                if memoryIncrease > thresholds.memorySpikeFactor {
                    anomalies.append(PerformanceAnomaly(
                        type: .memorySpike,
                        timestamp: dataPoint.timestamp,
                        value: memoryIncrease,
                        threshold: thresholds.memorySpikeFactor,
                        screenName: dataPoint.screenName,
                        description: "–°–∫–∞—á–æ–∫ –ø–∞–º—è—Ç–∏: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ \(String(format: "%.1f", memoryIncrease)) —Ä–∞–∑"
                    ))
                }
            }
            previousMemory = dataPoint.memoryUsage
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            for networkRequest in dataPoint.networkRequests {
                if networkRequest.duration > thresholds.maxNetworkDuration {
                    anomalies.append(PerformanceAnomaly(
                        type: .slowNetworkRequest,
                        timestamp: networkRequest.timestamp,
                        value: networkRequest.duration,
                        threshold: thresholds.maxNetworkDuration,
                        screenName: dataPoint.screenName,
                        description: "–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å: \(String(format: "%.2f", networkRequest.duration))—Å –∫ \(networkRequest.url)"
                    ))
                }
            }
        }
        
        return anomalies
    }
    
    private func generateRecommendations(
        averageFPS: Double,
        averageCPU: Double,
        averageMemory: Double,
        peakMemory: Double,
        anomalies: [PerformanceAnomaly],
        thresholds: PerformanceThresholds
    ) -> [String] {
        var recommendations: [String] = []
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ FPS
        if averageFPS < thresholds.minFPS {
            recommendations.append("üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: —Å—Ä–µ–¥–Ω–∏–π FPS (\(String(format: "%.1f", averageFPS))) –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ")
            recommendations.append("‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π")
            recommendations.append("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
            recommendations.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CALayer –≤–º–µ—Å—Ç–æ UIView –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏")
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ CPU
        if averageCPU > thresholds.maxCPU * 0.8 { // 80% –æ—Ç –ø–æ—Ä–æ–≥–∞
            recommendations.append("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: —Å—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ (\(String(format: "%.1f", averageCPU))%) –≤—ã—Å–æ–∫–∞—è")
            recommendations.append("‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Ç—è–∂–µ–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤—ã–µ –æ—á–µ—Ä–µ–¥–∏")
            recommendations.append("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞–º—è—Ç–∏
        if averageMemory > thresholds.maxMemory * 0.8 {
            recommendations.append("üíæ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (\(String(format: "%.1f", averageMemory)) MB) –≤—ã—Å–æ–∫–æ–µ")
            recommendations.append("‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–∞–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
            recommendations.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∞–±—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤")
            recommendations.append("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        }
        
        if peakMemory > thresholds.maxMemory * 1.2 {
            recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: –ø–∏–∫ (\(String(format: "%.1f", peakMemory)) MB)")
            recommendations.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏")
            recommendations.append("‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫—ç—à–µ–π")
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º
        let anomalyTypes = Set(anomalies.map { $0.type })
        
        if anomalyTypes.contains(.lowFPS) {
            recommendations.append("üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞–≤–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        }
        
        if anomalyTypes.contains(.memorySpike) {
            recommendations.append("üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏ –ø–∞–º—è—Ç–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö")
        }
        
        if anomalyTypes.contains(.slowNetworkRequest) {
            recommendations.append("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ API –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
        }
        
        // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if recommendations.isEmpty {
            recommendations.append("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–æ—Ä–º–µ")
            recommendations.append("üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")
        } else {
            recommendations.append("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Instruments")
            recommendations.append("üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        }
        
        return recommendations
    }
    
    private func analyzeScreenPerformance(data: [PerformanceData], thresholds: PerformanceThresholds) -> [String: ScreenPerformance] {
        var screenData: [String: [PerformanceData]] = [:]
        var screenTimes: [String: (start: Date, end: Date?)] = [:]
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —ç–∫—Ä–∞–Ω–∞–º
        for dataPoint in data {
            guard let screenName = dataPoint.screenName else { continue }
            
            if screenData[screenName] == nil {
                screenData[screenName] = []
                screenTimes[screenName] = (start: dataPoint.timestamp, end: nil)
            }
            
            screenData[screenName]?.append(dataPoint)
            screenTimes[screenName]?.end = dataPoint.timestamp
        }
        
        var screenPerformance: [String: ScreenPerformance] = [:]
        
        for (screenName, screenDataPoints) in screenData {
            guard !screenDataPoints.isEmpty else { continue }
            
            let averageFPS = screenDataPoints.map { $0.fps }.reduce(0, +) / Double(screenDataPoints.count)
            let averageCPU = screenDataPoints.map { $0.cpuUsage }.reduce(0, +) / Double(screenDataPoints.count)
            let averageMemory = screenDataPoints.map { $0.memoryUsage }.reduce(0, +) / Double(screenDataPoints.count)
            
            // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            let timeSpent: TimeInterval
            if let times = screenTimes[screenName], let endTime = times.end {
                timeSpent = endTime.timeIntervalSince(times.start)
            } else {
                timeSpent = 0
            }
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
            let screenAnomalies = detectAnomalies(data: screenDataPoints, thresholds: thresholds)
            
            screenPerformance[screenName] = ScreenPerformance(
                screenName: screenName,
                averageFPS: averageFPS,
                averageCPU: averageCPU,
                averageMemory: averageMemory,
                timeSpent: timeSpent,
                anomaliesCount: screenAnomalies.count
            )
        }
        
        return screenPerformance
    }
}

// MARK: - Analysis Helpers

extension DataAnalyzer {
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
    func calculateStatistics(for data: [PerformanceData]) -> PerformanceStatistics {
        guard !data.isEmpty else {
            return PerformanceStatistics(
                fpsStats: MetricStatistics(min: 0, max: 0, average: 0, median: 0),
                cpuStats: MetricStatistics(min: 0, max: 0, average: 0, median: 0),
                memoryStats: MetricStatistics(min: 0, max: 0, average: 0, median: 0)
            )
        }
        
        let fpsValues = data.map { $0.fps }.sorted()
        let cpuValues = data.map { $0.cpuUsage }.sorted()
        let memoryValues = data.map { $0.memoryUsage }.sorted()
        
        return PerformanceStatistics(
            fpsStats: calculateMetricStatistics(values: fpsValues),
            cpuStats: calculateMetricStatistics(values: cpuValues),
            memoryStats: calculateMetricStatistics(values: memoryValues)
        )
    }
    
    private func calculateMetricStatistics(values: [Double]) -> MetricStatistics {
        guard !values.isEmpty else {
            return MetricStatistics(min: 0, max: 0, average: 0, median: 0)
        }
        
        let min = values.first ?? 0
        let max = values.last ?? 0
        let average = values.reduce(0, +) / Double(values.count)
        let median = values.count % 2 == 0 
            ? (values[values.count / 2 - 1] + values[values.count / 2]) / 2
            : values[values.count / 2]
        
        return MetricStatistics(min: min, max: max, average: average, median: median)
    }
}

// MARK: - Supporting Structures

struct PerformanceStatistics {
    let fpsStats: MetricStatistics
    let cpuStats: MetricStatistics
    let memoryStats: MetricStatistics
}

struct MetricStatistics {
    let min: Double
    let max: Double
    let average: Double
    let median: Double
} 