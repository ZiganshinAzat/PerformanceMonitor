import Foundation
#if canImport(UIKit)
import UIKit
#endif
#if canImport(PerformanceMonitor)
import PerformanceMonitor
#endif

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π PerformanceMonitor
class DemoApp {
    
    private let monitor = PerformanceMonitor.shared
    private var isRunning = false
    
    func start() {
        print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PerformanceMonitor")
        print("=" * 60)
        
        setupMonitoring()
        runDemoScenarios()
    }
    
    private func setupMonitoring() {
        print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        let demoThresholds = PerformanceThresholds(
            cpuUsageWarning: 60.0,
            cpuUsageCritical: 85.0,
            memoryUsageWarning: 150.0,
            memoryUsageCritical: 300.0,
            fpsWarning: 50.0,
            fpsCritical: 30.0,
            batteryLevelWarning: 30.0,
            batteryLevelCritical: 15.0
        )
        
        // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫—É–Ω–¥–∞
        monitor.start(interval: 1.0, thresholds: demoThresholds)
        isRunning = true
        
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫—É–Ω–¥–∞")
    }
    
    private func runDemoScenarios() {
        print("\nüé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
        
        // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            self.scenario1_NormalOperation()
        }
        
        // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU
        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
            self.scenario2_HighCPULoad()
        }
        
        // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        DispatchQueue.main.asyncAfter(deadline: .now() + 8.0) {
            self.scenario3_NetworkRequests()
        }
        
        // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç—ã
        DispatchQueue.main.asyncAfter(deadline: .now() + 12.0) {
            self.scenario4_AnalysisAndReports()
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        DispatchQueue.main.asyncAfter(deadline: .now() + 16.0) {
            self.finishDemo()
        }
    }
    
    private func scenario1_NormalOperation() {
        print("\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("-" * 40)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        let metrics = monitor.getCurrentMetrics()
        printMetrics(metrics, title: "–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        // –°–∏–º—É–ª—è—Ü–∏—è –ª–µ–≥–∫–æ–π —Ä–∞–±–æ—Ç—ã
        for i in 0..<100 {
            _ = sin(Double(i))
        }
    }
    
    private func scenario2_HighCPULoad() {
        print("\nüî• –°—Ü–µ–Ω–∞—Ä–∏–π 2: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU")
        print("-" * 40)
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU
        DispatchQueue.global(qos: .userInitiated).async {
            let startTime = Date()
            while Date().timeIntervalSince(startTime) < 2.0 {
                for i in 0..<10000 {
                    _ = sqrt(Double(i)) * cos(Double(i))
                }
            }
            
            DispatchQueue.main.async {
                let metrics = self.monitor.getCurrentMetrics()
                self.printMetrics(metrics, title: "–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
            }
        }
    }
    
    private func scenario3_NetworkRequests() {
        print("\nüåê –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        print("-" * 40)
        
        // –°–∏–º—É–ª—è—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in 0..<5 {
            DispatchQueue.main.asyncAfter(deadline: .now() + Double(i) * 0.3) {
                print("üì° –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ #\(i + 1)")
                
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ URLSession –∑–∞–ø—Ä–æ—Å—ã
                // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                DispatchQueue.global().asyncAfter(deadline: .now() + 0.5) {
                    DispatchQueue.main.async {
                        print("‚úÖ –ó–∞–ø—Ä–æ—Å #\(i + 1) –∑–∞–≤–µ—Ä—à–µ–Ω")
                    }
                }
            }
        }
    }
    
    private func scenario4_AnalysisAndReports() {
        print("\nüéØ –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤")
        print("-" * 40)
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let analysis = monitor.getPerformanceAnalysis()
        printAnalysis(analysis)
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
        print("\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
        monitor.generateReport(formats: [.json, .csv]) { result in
            switch result {
            case .success(let urls):
                print("‚úÖ –û—Ç—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
                for url in urls {
                    print("  üìÅ \(url.lastPathComponent)")
                }
            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: \(error.localizedDescription)")
            }
        }
    }
    
    private func finishDemo() {
        print("\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        print("=" * 60)
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        let finalMetrics = monitor.getCurrentMetrics()
        printMetrics(finalMetrics, title: "–§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor.stop()
        isRunning = false
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("üîß –§—Ä–µ–π–º–≤–æ—Ä–∫ PerformanceMonitor –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    }
    
    private func printMetrics(_ metrics: PerformanceData, title: String) {
        print("\nüìà \(title):")
        print("  üî• CPU: \(String(format: "%.1f", metrics.cpuUsage))%")
        print("  üíæ –ü–∞–º—è—Ç—å: \(String(format: "%.1f", metrics.memoryUsage)) –ú–ë")
        print("  üéÆ FPS: \(String(format: "%.1f", metrics.fps))")
        
        if let batteryLevel = metrics.batteryLevel {
            print("  üîã –ë–∞—Ç–∞—Ä–µ—è: \(String(format: "%.0f", batteryLevel))%")
        }
        
        if let screenName = metrics.currentScreen {
            print("  üì± –≠–∫—Ä–∞–Ω: \(screenName)")
        }
        
        print("  üïê –í—Ä–µ–º—è: \(DateFormatter.localizedString(from: metrics.timestamp, dateStyle: .none, timeStyle: .medium))")
    }
    
    private func printAnalysis(_ analysis: PerformanceAnalysis) {
        print("\nüéØ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print("  üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: \(analysis.overallScore)/100")
        print("  ‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏–π: \(analysis.anomalies.count)")
        
        if !analysis.anomalies.isEmpty {
            print("  üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏:")
            for anomaly in analysis.anomalies.prefix(3) {
                print("    ‚Ä¢ \(anomaly.type.rawValue): \(anomaly.description)")
            }
        }
        
        if !analysis.recommendations.isEmpty {
            print("  üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for recommendation in analysis.recommendations.prefix(3) {
                print("    ‚Ä¢ \(recommendation)")
            }
        }
    }
}

// MARK: - –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

/// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func runDemoApp() {
    let demo = DemoApp()
    demo.start()
}

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:
// runDemoApp() 